echo "# Wilsonproject25">> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Bwilson2loyno/Wilsonproject25.git
git push u origin main;
Connect Four

#include <iostream>
#include <vector>

const int Rows = 6;
const int Cols = 7;
const char Emp = '.';
const char PlayerX = 'A';
const char PlayerY = 'B';

class Connect4 {
public:
    Connect4() : board(Rows,std::vector<char>(Cols, Emp)),
    currentPlayer(PlayerX)    }

    void playGame() {
        bool gameWon = false,
        while (!gameWon && !isBoardFull()) {
            printBoard();

             int col;
             std::cout << "Player " << currentPlayer << ", enter column (0-6): ";
                if (!(std::cin >> col) || col < 0 || col >= Cols) {
                std::cin.clear(); // Clear error flags
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Ignore invalid input
                std::cout << "Invalid input. Please enter a number between 0 and 6.\n";
                continue;

        printBoard();
        if (gameWon) {
            std::cout << "Player " << currentPlayer << " wins!\n";
        } else {
            std::cout << "It's a draw!\n";
        }
    }

private:
    std::vector<std::vector<char>> board;
    char currentPlayer;

    void printBoard() {
        for (const auto& row : board) {
            for (char cell : row) {
                std::cout << cell << ' ';
            }
            std::cout << '\n';
        }
    }

    bool makeMove(int col) {
        if (col < 0 || col >= Cols) return false;
        for (int row = Rows - 1; row >= 0; --row) {
            if (board[row][col] == Emp) {
                board[row][col] = currentPlayer;
                return true;
            }
        }
        return false;
    }

    void switchPlayer() {
        currentPlayer = (currentPlayer == PlayerX) ? PlayerY : PlayerX;
    }

    bool isBoardFull() {
        for (const auto& row : board) {
            for (char cell : row) {
                if (cell == Emp) return false;
            }
        }
        return true;
    }
    bool checkWin() {
        return checkHorizontal() || checkVertical() || checkDiagonal();
    }

    bool checkHorizontal() {
        for (int row = 0; row < Rows; ++row) {
            for (int col = 0; col <= Cols - 4; ++col) {
                if (board[row][col] == currentPlayer &&
                    board[row][col + 1] == currentPlayer &&
                    board[row][col + 2] == currentPlayer &&
                    board[row][col + 3] == currentPlayer) {
                    return true;
                }
            }
        }
        return false;
    }

    bool checkVertical() {
        for (int col = 0; col < Cols; ++col) {
            for (int row = 0; row <= Rows - 4; ++row) {
                if (board[row][col] == currentPlayer &&
                    board[row + 1][col] == currentPlayer &&
                    board[row + 2][col] == currentPlayer &&
                    board[row + 3][col] == currentPlayer) {
                    return true;
                }
            }
        }
        return false;
    }

    bool checkDiagonal() {
        for (int row = 0; row <= Rows - 4; ++row) {
            for (int col = 0; col <= Cols - 4; ++col) {
                if (board[row][col] == currentPlayer &&
                    board[row + 1][col + 1] == currentPlayer &&
                    board[row + 2][col + 2] == currentPlayer &&
                    board[row + 3][col + 3] == currentPlayer) {
                    return true;
                }
            }
            for (int col = 3; col < Cols; ++col) {
                if (board[row][col] == currentPlayer &&
                    board[row + 1][col - 1] == currentPlayer &&
                    board[row + 2][col - 2] == currentPlayer &&
                    board[row + 3][col - 3] == currentPlayer) {
                    return true;
                }
            }
        }
        return false;
    }



int main() {
    Connect4 game;
    game.playGame();
    return 0;
